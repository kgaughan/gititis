import io
import os

import pytest

from gitosis import ssh
from gitosis.test.util import read_file, write_file


def _key(s):
    return "".join(s.split("\n")).strip()


KEY_1 = _key("""
ssh-rsa +v5XLsUrLsHOKy7Stob1lHZM17YCCNXplcKfbpIztS2PujyixOaBev1ku6H6ny
gUXfuYVzY+PmfTLviSwD3UETxEkR/jlBURACDQARJdUxpgt9XG2Lbs8bhOjonAPapxrH0o
9O8R0Y6Pm1Vh+H2U0B4UBhPgEframpeJYedijBxBV5aq3yUvHkXpcjM/P0gsKqr036k= j
unk@gunk
""")

KEY_2 = _key("""
ssh-rsa 4BX2TxZoD3Og2zNjHwaMhVEa5/NLnPcw+Z02TDR0IGJrrqXk7YlfR3oz+Wb/Eb
Ctli20SoWY0Ur8kBEF/xR4hRslZ2U8t0PAJhr8cq5mifhok/gAdckmSzjD67QJ68uZbga8
ZwIAo7y/BU7cD3Y9UdVZykG34NiijHZLlCBo/TnobXjFIPXvFbfgQ3y8g+akwocFVcQ= f
roop@snoop
""")


def test_empty(tmpdir):
    empty = os.path.join(tmpdir, "empty")
    os.makedirs(empty)
    gen = ssh.read_keys(keydir=empty)
    with pytest.raises(StopIteration):
        next(gen)


def test_ignore_dot(tmpdir):
    keydir = os.path.join(tmpdir, "ignore_dot")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, ".jdoe.pub"), KEY_1 + "\n")
    gen = ssh.read_keys(keydir=keydir)
    with pytest.raises(StopIteration):
        next(gen)


def test_ignore_nonpub(tmpdir):
    keydir = os.path.join(tmpdir, "ignore_dot")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, "jdoe.xub"), KEY_1 + "\n")
    gen = ssh.read_keys(keydir=keydir)
    with pytest.raises(StopIteration):
        next(gen)


def test_one(tmpdir):
    keydir = os.path.join(tmpdir, "one")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, "jdoe.pub"), KEY_1 + "\n")

    gen = ssh.read_keys(keydir=keydir)
    assert next(gen) == ("jdoe", KEY_1)
    with pytest.raises(StopIteration):
        next(gen)


def test_two(tmpdir):
    keydir = os.path.join(tmpdir, "two")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, "jdoe.pub"), KEY_1 + "\n")
    write_file(os.path.join(keydir, "wsmith.pub"), KEY_2 + "\n")

    gen = ssh.read_keys(keydir=keydir)
    assert frozenset(gen) == frozenset(
        [
            ("jdoe", KEY_1),
            ("wsmith", KEY_2),
        ]
    )


def test_multiple_lines(tmpdir):
    keydir = os.path.join(tmpdir, "keys")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, 'jd"oe.pub'), KEY_1 + "\n")

    gen = ssh.read_keys(keydir=keydir)
    assert frozenset(gen) == frozenset([])


def test_bad_filename(tmpdir):
    keydir = os.path.join(tmpdir, "two")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, "jdoe.pub"), KEY_1 + "\n" + KEY_2 + "\n")

    gen = ssh.read_keys(keydir=keydir)
    assert frozenset(gen) == frozenset(
        [
            ("jdoe", KEY_1),
            ("jdoe", KEY_2),
        ]
    )


class GenerateAuthorizedKeysTest:
    def test_simple(self):
        def k():
            yield ("jdoe", KEY_1)
            yield ("wsmith", KEY_2)

        gen = ssh.generate_authorized_keys(k())
        assert next(gen) == ssh.COMMENT
        assert next(gen) == (
            'command="gitosis-serve jdoe",no-port-forwarding,no-X11-f' + f"orwarding,no-agent-forwarding,no-pty {KEY_1}"
        )
        assert next(gen) == (
            'command="gitosis-serve wsmith",no-port-forwarding,no-X11'
            + f"-forwarding,no-agent-forwarding,no-pty {KEY_2}"
        )

        with pytest.raises(StopIteration):
            next(gen)


class FilterAuthorizedKeysTest:
    def run(self, s):
        f = io.StringIO(s)
        lines = ssh.filter_authorized_keys(f)
        got = "".join([f"{line}\n" for line in lines])
        return got

    def check_no_change(self, s):
        assert self.run(s) == s

    def test_not_filtered_comment(self):
        self.check_no_change("#comment\n")

    def test_not_filtered_junk(self):
        self.check_no_change("junk\n")

    def test_not_filtered_key(self):
        self.check_no_change(f"{KEY_1}\n")

    def test_not_filtered_key_with_command(self):
        s = f"""\
command="faketosis-serve wsmith",no-port-forwarding,no-X11-forwardin\
g,no-agent-forwarding,no-pty {KEY_1}
"""
        self.check_no_change(s)

    def test_filter_autogenerated_comment_backwards_compat(self):
        assert self.run("### autogenerated by gitosis, DO NOT EDIT\n") == ""

    def test_filter_autogenerated_comment_current(self):
        assert self.run(ssh.COMMENT + "\n") == ""

    def test_filter_simple(self):
        s = f"""\
command="gitosis-serve wsmith",no-port-forwarding,no-X11-forwardin\
g,no-agent-forwarding,no-pty {KEY_1}
"""
        assert self.run(s) == ""

    def test_filter_with_path(self):
        s = f"""\
command="/foo/bar/baz/gitosis-serve wsmith",no-port-forwarding,no-X11-forwardin\
g,no-agent-forwarding,no-pty {KEY_1}
"""
        assert self.run(s) == ""


def test_write_authorized_keys(tmpdir):
    path = os.path.join(tmpdir, "authorized_keys")
    with open(path, "w") as f:
        f.write(
            f"""\
# foo
bar
### autogenerated by gitosis, DO NOT EDIT
command="/foo/bar/baz/gitosis-serve wsmith",no-port-forwarding,\
no-X11-forwarding,no-agent-forwarding,no-pty {KEY_2}
baz
"""
        )
    keydir = os.path.join(tmpdir, "one")
    os.makedirs(keydir)
    write_file(os.path.join(keydir, "jdoe.pub"), KEY_1 + "\n")

    ssh.write_authorized_keys(path=path, keydir=keydir)

    assert (
        read_file(path)
        == f"""\
# foo
bar
baz
### autogenerated by gitosis, DO NOT EDIT
command="gitosis-serve jdoe",no-port-forwarding,\
no-X11-forwarding,no-agent-forwarding,no-pty {KEY_1}
"""
    )
